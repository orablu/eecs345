EECS 345: Programming Language Concepts
Interpreter Project, Part 4
Due Wednesday, April 17

For this and all Interpreter Project's, you are strongly encouraged, but not required, to work in a team of two. You will be building off of the interpreter you wrote for part 1. As a result, it is expected that you keep the same teams that you used for part 3. If you need to change your team, please speak to the course instructor.

In this homework, you will expand on the interpreter of part 3 adding class definitions. Note that we will not be adding objects in this part of the interpreter. We still assume all variables store integers (for the individuals working solo) and integers and boolean (for those working in teams). Likewise, all functions will only return integers (for the individuals working solo) and integers and boolean (for those working in teams). For teams, we will also still allow functions to be both call-by-value and call-by-reference.

Here is an example of a program of two classes, using only static fields and methods:

class Rectangle {
  static var width = 10;
  static var height = 12;

  static area() {
    var a = width * height;
    return a;
  }

  static setSize(x, y) {
    width = x;
    height = y;
  }
}

class Square extends Rectangle {
  static setSize(x) {
    super.setSize(x, x);
  }

  static main() {
    setSize(20);
    return area();
  }
}

Your interpreter should now take two parameters, a file and a classname. For example, (interpret "MyProgram.j" "Square"), where file is the name of the file to be interpreted, and classname is the name of the class whose main method you are to run. The function should call parser on the file file, and then lookup (string->symbol classname) in the environment to get the desired class, and then lookup the main method of this class. The final value returned by your interpreter should be whatever is returned by main.

For Teams

For those working in a team, you must also allow for method/function overloading. Since we are only checking types dynamically, an overloaded function must have a different number of parameters.

Details

- Variables and methods can now be static (class) or non-static (instance).
- The main method should be static.
- The language supports use of super.
- The top level of the program is only class definitions.
- Each class definition consists of variable declarations and function definitions (just like the top level of part 3 of the interpreter).
- Although it will not be useful until the next part of the interpreter, not that nested uses of the dot operator will be allowed.

Parser Constructs

class A {              =>   (class A () body)
  body

class B extends A {    =>   (class B (extends A)  body)
  body

static var x = 5;      =>   (static-var x 5)

static main() {        =>   (static-function main () body)
  body

A.x                    =>   (dot A x)

A.f(3,5)               =>   (funcall (dot A f) 3 5)

Basic Task

Write an interpreter that correctly handles classes, static variables, and static methods. You should be able to set value for variables, call methods, and use super.

Recall the suggested order from lecture to attack the problem.

1. Create helper functions to create a new class and instance (will be needed for part 5) and to access the portions of a class and instance.
2. Everywhere when interpreting statements and expressions that an environment is passed as a parameter, you also have to pass parameters for class and instance.
3. Change the top level interpreter code that you used in part 3 to return a class instead of returning an environment.
4. Change the top level interpreter code that you wrote for part 3 to expect static and non-static declarations for variables and functions.
5. Create a new top level for the interpreter that reads a list of class definitions, and stores each class with its definition in the environment.
6. Create a function that takes a variable, a class, and an instance, and checks if the variable is in the list of class or instance variables and returns its value.
7. Create a function that takes a variable, and environment, a class, and an instance, if the variable is in the environment, look it up, otherwise look in the class and instance variables.
8. Create a function that takes the left hand side of a dot expression and returns a (class, instance) pair representing the class and instance of the left hand side.
9. Create a function that takes a dot expression, calls the above function to evaluate the left hand side, and looks up the right hand side in the class/instance variables.
10. Update your code that interprets a function definition to add a new function to the closure that looks up the function's class in the environment.
11. Update the code that evaluates a function call to deal with objects and classes.
12. Update the code that interprets an assignment statement so that it looks for the variable in the environment, class and instance variables
13. Create a new interpret function.